<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.0">

    <concept id="dependency:Annotation">
        <description>Creates a DEPENDS_ON relationship between an annotated element and the types of the annotation and its values.</description>
        <cypher><![CDATA[
            MATCH
            	(e)-[:ANNOTATED_BY]->(a:ANNOTATION)-[:OF_TYPE]->(at:TYPE)
			WHERE
				e:TYPE
				OR e:METHOD
				OR e:FIELD
			CREATE UNIQUE
				(e)-[:DEPENDS_ON]->(at)
			WITH
			    e, a
			MATCH
            	(a)-[:HAS*0..]->(v:VALUE),
            	(v)-[:OF_TYPE]->(vt:TYPE)
            CREATE UNIQUE
				(e)-[:DEPENDS_ON]->(vt)
            RETURN
				COUNT(DISTINCT e) as elements
	    ]]></cypher>
    </concept>

    <concept id="dependency:MethodParameter">
        <description>Creates a DEPENDS_ON relationship between a method and and the types of its parameters.</description>
        <cypher><![CDATA[
            MATCH
            	(m:METHOD)-[:HAS]->(p:PARAMETER)-[:DEPENDS_ON]->(t:TYPE)
			CREATE UNIQUE
				(m)-[:DEPENDS_ON]->(t)
			RETURN
				COUNT(DISTINCT m) as methods
	    ]]></cypher>
    </concept>

    <concept id="dependency:MethodInvocation">
        <description>Creates a DEPENDS_ON relationship between a method and the parameter and exception types of all methods it invokes.</description>
        <cypher><![CDATA[
            MATCH
            	(m:METHOD)-[:INVOKES]->(target:METHOD),
            	(dt:TYPE)-[:CONTAINS]->(target),
            	(target)-[:HAS]->(p:PARAMETER)-[:DEPENDS_ON]->(pt)
			CREATE UNIQUE
				(m)-[:DEPENDS_ON]->(dt),
				(m)-[:DEPENDS_ON]->(pt)
			RETURN
				COUNT(DISTINCT m) as methods
	    ]]></cypher>
    </concept>

    <concept id="dependency:FieldAccess">
        <description>Creates a DEPENDS_ON relationship between a method and the all fields types and their containing types it reads and writes.</description>
        <cypher><![CDATA[
            MATCH
            	(m:METHOD)-[:READS|WRITES]->(target:FIELD),
            	(dt:TYPE)-[:CONTAINS]->(target),
            	(target)-[:DEPENDS_ON]->(ft)
			CREATE UNIQUE
				(m)-[:DEPENDS_ON]->(dt),
				(m)-[:DEPENDS_ON]->(ft)
			RETURN
				COUNT(DISTINCT m) as fields
	    ]]></cypher>
    </concept>

    <concept id="dependency:TypeBody">
        <requiresConcept refId="dependency:Annotation"/>
        <requiresConcept refId="dependency:MethodParameter"/>
        <requiresConcept refId="dependency:MethodInvocation"/>
        <requiresConcept refId="dependency:FieldAccess"/>
        <description>Creates a DEPENDS_ON relationship between a type and all types its body (i.e. methods and fields) depends on.</description>
        <cypher><![CDATA[
            MATCH 
            	(t1:TYPE)-[:CONTAINS*0..1]->(fieldOrMethod)-[:DEPENDS_ON|THROWS]->(t2:TYPE)
			WHERE 
				t1<>t2
				AND (fieldOrMethod:FIELD OR fieldOrMethod:METHOD)
			CREATE UNIQUE
				(t1)-[:DEPENDS_ON]->(t2)
			RETURN
				COUNT(DISTINCT t1) as types
	    ]]></cypher>
    </concept>

    <concept id="dependency:Type">
        <requiresConcept refId="dependency:TypeBody"/>
        <description>Creates a DEPENDS_ON relationship between a type and all types its signature and body depends on.</description>
        <cypher><![CDATA[
            MATCH 
            	(t1:TYPE)-[:DEPENDS_ON|EXTENDS|IMPLEMENTS]->(t2:TYPE)
			WHERE 
				t1<>t2
			CREATE UNIQUE 
				(t1)-[:DEPENDS_ON]->(t2)
			RETURN 
				COUNT(DISTINCT t1) as types
        ]]></cypher>
    </concept>

    <concept id="dependency:Package">
        <requiresConcept refId="dependency:Type"/>
        <description>Creates a DEPENDS_ON relationship between a packages if there are type dependencies between them.</description>
        <cypher><![CDATA[
			MATCH  
				(p1:PACKAGE)-[:CONTAINS]->(t1:TYPE)-[:DEPENDS_ON]->(t2:TYPE)<-[:CONTAINS]-(p2:PACKAGE)
			WHERE 
				p1<>p2
			CREATE UNIQUE 
				(p1)-[:DEPENDS_ON]->(p2)
			RETURN 
				COUNT(DISTINCT p1) as packages
        ]]></cypher>
    </concept>

    <concept id="dependency:Artifact">
        <requiresConcept refId="dependency:Type"/>
        <description>Creates a DEPENDS_ON relationship between artifacts if there are type dependencies between them.</description>
        <cypher><![CDATA[
			MATCH  
				(a1:ARTIFACT)-[:CONTAINS]->(t1:TYPE)-[:DEPENDS_ON]->(t2:TYPE)<-[:CONTAINS]-(a2:ARTIFACT)
			WHERE 
				a1<>a2
			CREATE UNIQUE 
				(a1)-[:DEPENDS_ON]->(a2)
			RETURN 
				a1 AS artifact, COLLECT(DISTINCT a2.NAME) AS dependencies
        ]]></cypher>
    </concept>

    <constraint id="dependency:PackageCycles">
        <requiresConcept refId="dependency:Package"/>
        <description>There must be no cyclic package dependencies.</description>
        <cypher><![CDATA[
			MATCH
				(p1:PACKAGE)-[:DEPENDS_ON]->(p2:PACKAGE),
				path=shortestPath((p2)-[:DEPENDS_ON*]->(p1:PACKAGE))
			WHERE
				p1<>p2
			RETURN
				p1 as package, extract(p in nodes(path) : p.FQN) as cycle
			ORDER BY
				package.FQN
        ]]></cypher>
    </constraint>

    <constraint id="dependency:TypeCycles">
        <requiresConcept refId="dependency:Package"/>
        <description>There must be no cyclic type dependencies.</description>
        <cypher><![CDATA[
            MATCH
                (p1:PACKAGE)-[:DEPENDS_ON*0..1]->(p2:PACKAGE),
                shortestPath((p2)-[:DEPENDS_ON*]->(p1:PACKAGE))
            WITH
                p1, p2
            MATCH
                (p1)-[:CONTAINS]->(t1:TYPE),
                (p2)-[:CONTAINS]->(t2:TYPE),
                (t1)-[:DEPENDS_ON]->(t2),
                path=shortestPath((t2)-[:DEPENDS_ON*]->(t1))
            WHERE
                NOT(
                  t1=t2 OR (t1)-[:CONTAINS]-(t2)
                )
            RETURN
                length(path) as length, extract(p in nodes(path) : p.FQN) as cycle
        ]]></cypher>
    </constraint>

    <constraint id="dependency:ArtifactCycles">
        <requiresConcept refId="dependency:Artifact"/>
        <description>There must be no cyclic artifact dependencies.</description>
        <cypher><![CDATA[
			MATCH
				(a1:ARTIFACT)-[:DEPENDS_ON]->(a2:ARTIFACT),
				path=shortestPath((a2)-[:DEPENDS_ON*]->(a1:ARTIFACT))
			WHERE
				a1<>a2
			RETURN
				a1 as artifact, extract(a in nodes(path) : a.FQN) as cycle
			ORDER BY
				artifact.FQN
        ]]></cypher>
    </constraint>

</jqa:jqassistant-rules>