<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.0">

    <concept id="java:ClassDependency">
        <description />
        <cypher><![CDATA[
            MATCH 
            	c1:CLASS-[:CONTAINS*0..1]->fom-[:DEPENDS_ON|ANNOTATED_BY|THROWS]->c2:CLASS
			WHERE 
				c1<>c2
			CREATE UNIQUE 
				(c1)-[:DEPENDS_ON]->(c2)
			RETURN 
				COUNT(c1) as count
        ]]></cypher>
    </concept>
	
    <concept id="java:PackageDependency">
		<requiresConcept refId="java:ClassDependency"/>
        <description />
        <cypher><![CDATA[
			MATCH  
				(p1:PACKAGE)-[:CONTAINS]->(c1:CLASS)-[:DEPENDS_ON|ANNOTATED_BY|EXTENDS|IMPLEMENTS]->(c2:CLASS)<-[:CONTAINS]-(p2:PACKAGE)
			WHERE 
				c1<>c2 AND p1<>p2
			CREATE UNIQUE 
				(p1)-[:DEPENDS_ON]->(p2)
			RETURN 
				COUNT(p1) as count
        ]]></cypher>
    </concept>

   <constraint id="java:CyclicPackageDependency">
        <requiresConcept refId="java:PackageDependency"/>
        <description>There must be no cyclic package dependencies.</description>
        <cypher><![CDATA[
			MATCH
				p1:PACKAGE-[:DEPENDS_ON]->p2:PACKAGE,
				path2=shortestPath(p2-[:DEPENDS_ON*]->p1:PACKAGE)
			WHERE
				p1<>p2
			RETURN
				p1.FQN as package, extract(p in nodes(path2) : p.FQN) as Path
			ORDER BY
				package	
        ]]></cypher>
    </constraint>
	
	<constraint id="java:CyclicClassDependency">
        <requiresConcept refId="java:ClassDependency"/>
        <requiresConcept refId="java:PackageDependency"/>
        <description>There must be no cyclic class dependencies.</description>
        <!--
        <cypher><![CDATA[
	        MATCH 
	        	p1:PACKAGE-[:DEPENDS_ON*0..1]->p2:PACKAGE, 
	        	shortestPath(p2-[:DEPENDS_ON*]->p1:PACKAGE)
			WITH 
				p1, p2
			MATCH  
				p1-[:CONTAINS]->c1:CLASS, 
				c1-[:DEPENDS_ON|ANNOTATED_BY|EXTENDS|IMPLEMENTS]->c2, 
				cpath2=shortestPath(c2-[:DEPENDS_ON|ANNOTATED_BY|EXTENDS|IMPLEMENTS*]->c1)
			WHERE 
            	c1<>c2
			RETURN  
				c1.FQN as class, extract(p in nodes(cpath2) : p.FQN) as path
			LIMIT 100
        ]]></cypher>
        -->
        <cypher><![CDATA[
            MATCH
                p1:PACKAGE-[:DEPENDS_ON]->p2:PACKAGE,
                shortestPath(p2-[:DEPENDS_ON*]->p1:PACKAGE)
            WITH
                p1, p2
            MATCH
                p1-[:CONTAINS]->c1:CLASS,
                p2-[:CONTAINS]->c2:CLASS,
                c1-[:DEPENDS_ON]->c2,
                path=shortestPath(c2-[:DEPENDS_ON*]->c1)
            WHERE
                c1<>c2
            RETURN
                length(path) as length, extract(p in nodes(path) : p.FQN) as cycle
        ]]></cypher>
    </constraint>
    
</jqa:jqassistant-rules>